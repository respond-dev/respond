service: ${file(./config/project.yml):name}

provider:
  name: aws
  runtime: nodejs12.x
  environment: ${file(./config/project.yml):${opt:stage, self:provider.stage}.envVars}
  apiGateway:
    binaryMediaTypes:
      - "*/*"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:PutParameter
      Resource:
        - 'Fn::Join':
          - ':'
          - - 'arn:aws:ssm'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'parameter/${file(./config/project.yml):${opt:stage, self:provider.stage}.ssmKey}/*'
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - "arn:aws:s3:::${file(./config/project.yml):${opt:stage, self:provider.stage}.s3Bucket}/*"
        - "arn:aws:s3:::${file(./config/project.yml):${opt:stage, self:provider.stage}.s3Bucket}"
functions:
  postmaster:
    handler: dist/cjs/libs/respond/lambdaServer.lambdaServer
    events:
      - http:
          path: /
          method: ANY
      - http:
          path: /{any+}
          method: ANY
